// White board problems has no help of any linter/precompiler. In the interviews white board problems are done in real time. 
// This file aims to practice this kind of problems 

Within the Amazon Gaming Distribution System, a logistics coordinator is faced with the task 
of efficiently distributing a collection of n computer games among k different children. Each game is 
characterised by its size, denoted by gameSize[i] for 1 ≤ i ≤ n. To facilitate the distribution process, 
the coordinator opts to utilise pen drives, ordering k pen drives with identical storage capacities. Each 
child can receive a maximum of 2 games, and every child must receive at least one game, also no game 
should be left unassigned. 

Considering the impracticality of transferring large game files over the internet, the strategy involves 
determining the minimum storage capacity required for the pen drives. A pen drive can only store games if 
the sum of their sizes does not exceed the pen drive's storage capacity. What is the minimum storage 
capacity of pen drives that you must order to be able to give these games to the children? 

Example: 
n = 4
gameSize[] = [9, 2, 4, 6] 
k = 3 

We note that we will need pen drives of the size of at least 9 units, to store the first game. 
This also turns out to be the minimum size of pen drives that should be ordered to give the games 
to these children. We can use the first pen drive to store the game of size 9, the 2nd one to store 
the second and third games, and the 3rd pen drive to store the fourth game. Hence, the minimum capacity 
of pen drives required is 9 units. 

parameters: List<Integer> gameSize, int k
// Example: 
// Input: k=3, gamesize = [9,2,4,6]
// give 1 pendrive with min storage (containing 1 or 2 games) to every kid (k)
// Binary search -> max storage of pendrive: 9+2+4+6 min storage=9
// can be distributed? -> have at least 3 pendrives with all the games storaged
// 

